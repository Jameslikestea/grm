{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to GRMPKG GRMPKG is a package manager for Golang that is designed for hosting packages both in the cloud and on-prem. The software provides an immutable Git server preventing items from changing over time, and also preventing dependencies from disappearing.","title":"Welcome to GRMPKG"},{"location":"#welcome-to-grmpkg","text":"GRMPKG is a package manager for Golang that is designed for hosting packages both in the cloud and on-prem. The software provides an immutable Git server preventing items from changing over time, and also preventing dependencies from disappearing.","title":"Welcome to GRMPKG"},{"location":"quickstart/quickstart/","text":"Quick Start GRMPKG In order to run GRMPKG, you will need to either download the prebuilt, Intel/Linux binary and run this, or compile for your target. Pre-built binaries can be found on Github GRMPKG is tested against S3 compatible storage (Primarily S3 and Min.io ) and requires you to use Github as an authentication provider, although this will likely change to any OAuth compliant engine in the future. Setting up your Identity Provider Github To setup Github as your authentication provider please start by following this guide to setup an OAuth application and make a note of the Client Secret and Client ID. Setting up your S3 Storage In order to use S3 as your storage option for GRM you will need an Access Key ID and a Secret Access Key these will form the two components for AWS Signed Auth. The permissions that you will need for AWS are as follows across the entire bucket that you are using: s3:PutObject s3:GetObject You will need to create an access key and secret key with these permissions and take note of the keys. Setting up an RSA Key You will also need to generate a host_key for the box, which should be shared across all instances that you want to load balance against. You can generate this with openssl genrsa -out private_key.pem 2048 I would recommend using at least a 2048 bit RSA key, however I would personally use a 4096-bit key for additional security. Setting up the application To setup the application we will need the items we spoke about before as these will form the storage and identity trust relationships with the other components in the application. In order to setup the application we will need to form a yaml file /etc/grmpkg/grmpkg.yml which is where the application will search for the file. The application will search in order The /etc/grmpkg/ directory The current working directory authentication: github: baseurl: <YOUR HOSTNAME> clientid: <GITHUB CLIENT ID> clientsecret: <GITHUB CLIENT SECRET> provider: github domain: <YOUR BASE DOMAIN> http: interface: 0.0.0.0 port: \"8080\" log: file: true level: INFO path: /var/log/grmpkg.log ssh: interface: 0.0.0.0 keypath: <PATH TO RSA KEY> port: \"2222\" username: git storage: s3: access_key: <YOUR AWS ACCESS KEY ID> bucket: <YOUR S3 BUCKET> concurrency: 5000 endpoint: s3.<AWS REGION>.amazonaws.com region: <AWS REGION> secret_key: <YOUR AWS SECRET ACCESS KEY> ssl: true type: s3 Once you have your configuration file defined, you can go ahead and run the process using $ /bin/grmpkg Debugging You will need to ensure that the user that you run the process as has permission to log to the file that you set as the logfile.","title":"Quick Start GRMPKG"},{"location":"quickstart/quickstart/#quick-start-grmpkg","text":"In order to run GRMPKG, you will need to either download the prebuilt, Intel/Linux binary and run this, or compile for your target. Pre-built binaries can be found on Github GRMPKG is tested against S3 compatible storage (Primarily S3 and Min.io ) and requires you to use Github as an authentication provider, although this will likely change to any OAuth compliant engine in the future.","title":"Quick Start GRMPKG"},{"location":"quickstart/quickstart/#setting-up-your-identity-provider","text":"","title":"Setting up your Identity Provider"},{"location":"quickstart/quickstart/#github","text":"To setup Github as your authentication provider please start by following this guide to setup an OAuth application and make a note of the Client Secret and Client ID.","title":"Github"},{"location":"quickstart/quickstart/#setting-up-your-s3-storage","text":"In order to use S3 as your storage option for GRM you will need an Access Key ID and a Secret Access Key these will form the two components for AWS Signed Auth. The permissions that you will need for AWS are as follows across the entire bucket that you are using: s3:PutObject s3:GetObject You will need to create an access key and secret key with these permissions and take note of the keys.","title":"Setting up your S3 Storage"},{"location":"quickstart/quickstart/#setting-up-an-rsa-key","text":"You will also need to generate a host_key for the box, which should be shared across all instances that you want to load balance against. You can generate this with openssl genrsa -out private_key.pem 2048 I would recommend using at least a 2048 bit RSA key, however I would personally use a 4096-bit key for additional security.","title":"Setting up an RSA Key"},{"location":"quickstart/quickstart/#setting-up-the-application","text":"To setup the application we will need the items we spoke about before as these will form the storage and identity trust relationships with the other components in the application. In order to setup the application we will need to form a yaml file /etc/grmpkg/grmpkg.yml which is where the application will search for the file. The application will search in order The /etc/grmpkg/ directory The current working directory authentication: github: baseurl: <YOUR HOSTNAME> clientid: <GITHUB CLIENT ID> clientsecret: <GITHUB CLIENT SECRET> provider: github domain: <YOUR BASE DOMAIN> http: interface: 0.0.0.0 port: \"8080\" log: file: true level: INFO path: /var/log/grmpkg.log ssh: interface: 0.0.0.0 keypath: <PATH TO RSA KEY> port: \"2222\" username: git storage: s3: access_key: <YOUR AWS ACCESS KEY ID> bucket: <YOUR S3 BUCKET> concurrency: 5000 endpoint: s3.<AWS REGION>.amazonaws.com region: <AWS REGION> secret_key: <YOUR AWS SECRET ACCESS KEY> ssl: true type: s3 Once you have your configuration file defined, you can go ahead and run the process using $ /bin/grmpkg","title":"Setting up the application"},{"location":"quickstart/quickstart/#debugging","text":"You will need to ensure that the user that you run the process as has permission to log to the file that you set as the logfile.","title":"Debugging"},{"location":"quickstart/using-the-api/","text":"Using the API Currently GRMPKG is not in a state where the UI can provide all of the necessary functionality to get it up and running. As such you will need to use the browser to authenticate and then a client like Postman or cURL to send requests to the API. Obtaining a token To obtain a token you will need to go through the standard login flow, to do this, ensure that the process is running and then head to the HTTP interface in your browser. Once there click the login button in the top right. (Images to come soon) Then grab the cookie that's named grm.authentication Adding an SSH Key to your user To add an SSH key to your user run the following POST /authn/ssh ssh-rsa AAA... user@laptop Creating a namespace A namespace is the top level grouping of repositories and is what GRMPKG will use to help users find packages To create a namespace run the following POST /api/ns/<YOUR_NAMESPACE>?public=1 You should replace with the name that you want to use and set public to 1 if you would like this to be publicly exposed (currently you should do this for all namespaces as the logic hasn't been written yet for private) Creating a repository The bit that you will ultimately need for running packages is a repository, this is just a git repository, but each one needs to be claimed by one (and only one) user. This ownership is likely to change moving forward, but for now this is how it wil work. To create a repository run the following POST /api/ns/<YOUR_NAMESPACE>/r/<YOUR_REPOSITORY>?public=1 Again, replace the variables with the names that you would like to use. You must have created a namespace before you can create a repository in it. Also at the moment logic is only working for public repositories in this system","title":"Using the API"},{"location":"quickstart/using-the-api/#using-the-api","text":"Currently GRMPKG is not in a state where the UI can provide all of the necessary functionality to get it up and running. As such you will need to use the browser to authenticate and then a client like Postman or cURL to send requests to the API.","title":"Using the API"},{"location":"quickstart/using-the-api/#obtaining-a-token","text":"To obtain a token you will need to go through the standard login flow, to do this, ensure that the process is running and then head to the HTTP interface in your browser. Once there click the login button in the top right. (Images to come soon) Then grab the cookie that's named grm.authentication","title":"Obtaining a token"},{"location":"quickstart/using-the-api/#adding-an-ssh-key-to-your-user","text":"To add an SSH key to your user run the following POST /authn/ssh ssh-rsa AAA... user@laptop","title":"Adding an SSH Key to your user"},{"location":"quickstart/using-the-api/#creating-a-namespace","text":"A namespace is the top level grouping of repositories and is what GRMPKG will use to help users find packages To create a namespace run the following POST /api/ns/<YOUR_NAMESPACE>?public=1 You should replace with the name that you want to use and set public to 1 if you would like this to be publicly exposed (currently you should do this for all namespaces as the logic hasn't been written yet for private)","title":"Creating a namespace"},{"location":"quickstart/using-the-api/#creating-a-repository","text":"The bit that you will ultimately need for running packages is a repository, this is just a git repository, but each one needs to be claimed by one (and only one) user. This ownership is likely to change moving forward, but for now this is how it wil work. To create a repository run the following POST /api/ns/<YOUR_NAMESPACE>/r/<YOUR_REPOSITORY>?public=1 Again, replace the variables with the names that you would like to use. You must have created a namespace before you can create a repository in it. Also at the moment logic is only working for public repositories in this system","title":"Creating a repository"}]}