// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/Jameslikestea/grm/internal/storage/ent/object"
)

// Object is the model entity for the Object schema.
type Object struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Package holds the value of the "package" field.
	Package string `json:"package,omitempty"`
	// Type holds the value of the "type" field.
	Type int8 `json:"type,omitempty"`
	// Hash holds the value of the "hash" field.
	Hash string `json:"hash,omitempty"`
	// Content holds the value of the "content" field.
	Content []byte `json:"content,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Object) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case object.FieldContent:
			values[i] = new([]byte)
		case object.FieldID, object.FieldType:
			values[i] = new(sql.NullInt64)
		case object.FieldPackage, object.FieldHash:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Object", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Object fields.
func (o *Object) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case object.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			o.ID = int(value.Int64)
		case object.FieldPackage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field package", values[i])
			} else if value.Valid {
				o.Package = value.String
			}
		case object.FieldType:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				o.Type = int8(value.Int64)
			}
		case object.FieldHash:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field hash", values[i])
			} else if value.Valid {
				o.Hash = value.String
			}
		case object.FieldContent:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field content", values[i])
			} else if value != nil {
				o.Content = *value
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Object.
// Note that you need to call Object.Unwrap() before calling this method if this Object
// was returned from a transaction, and the transaction was committed or rolled back.
func (o *Object) Update() *ObjectUpdateOne {
	return (&ObjectClient{config: o.config}).UpdateOne(o)
}

// Unwrap unwraps the Object entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (o *Object) Unwrap() *Object {
	tx, ok := o.config.driver.(*txDriver)
	if !ok {
		panic("ent: Object is not a transactional entity")
	}
	o.config.driver = tx.drv
	return o
}

// String implements the fmt.Stringer.
func (o *Object) String() string {
	var builder strings.Builder
	builder.WriteString("Object(")
	builder.WriteString(fmt.Sprintf("id=%v", o.ID))
	builder.WriteString(", package=")
	builder.WriteString(o.Package)
	builder.WriteString(", type=")
	builder.WriteString(fmt.Sprintf("%v", o.Type))
	builder.WriteString(", hash=")
	builder.WriteString(o.Hash)
	builder.WriteString(", content=")
	builder.WriteString(fmt.Sprintf("%v", o.Content))
	builder.WriteByte(')')
	return builder.String()
}

// Objects is a parsable slice of Object.
type Objects []*Object

func (o Objects) config(cfg config) {
	for _i := range o {
		o[_i].config = cfg
	}
}
